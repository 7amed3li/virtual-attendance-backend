
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BildirimlerScalarFieldEnum = {
  id: 'id',
  kullanici_id: 'kullanici_id',
  baslik: 'baslik',
  icerik: 'icerik',
  goruldu_mu: 'goruldu_mu',
  olusturma_tarihi: 'olusturma_tarihi',
  ders_id: 'ders_id'
};

exports.Prisma.BolumlerScalarFieldEnum = {
  id: 'id',
  ad: 'ad',
  fakulte_id: 'fakulte_id'
};

exports.Prisma.Ders_kayitlariScalarFieldEnum = {
  id: 'id',
  ders_id: 'ders_id',
  ogrenci_id: 'ogrenci_id',
  alinma_tipi: 'alinma_tipi',
  devamsizlik_durum: 'devamsizlik_durum',
  universite_kodu: 'universite_kodu'
};

exports.Prisma.DerslerScalarFieldEnum = {
  id: 'id',
  ad: 'ad',
  bolum_id: 'bolum_id',
  ogretmen_id: 'ogretmen_id',
  donem: 'donem',
  akademik_yil: 'akademik_yil',
  devamsizlik_limiti: 'devamsizlik_limiti',
  kod: 'kod',
  sube: 'sube',
  sinif: 'sinif',
  ders_saat: 'ders_saat'
};

exports.Prisma.FakultelerScalarFieldEnum = {
  id: 'id',
  ad: 'ad',
  enlem: 'enlem',
  boylam: 'boylam'
};

exports.Prisma.KullanicilarScalarFieldEnum = {
  id: 'id',
  universite_kodu: 'universite_kodu',
  ad: 'ad',
  soyad: 'soyad',
  eposta: 'eposta',
  sifre: 'sifre',
  rol: 'rol',
  hesap_durumu: 'hesap_durumu',
  giris_sayisi: 'giris_sayisi',
  son_giris: 'son_giris',
  olusturma_tarihi: 'olusturma_tarihi',
  reset_password_token_expires_at: 'reset_password_token_expires_at',
  reset_password_token: 'reset_password_token',
  telefon: 'telefon',
  son_sifre_degisikligi: 'son_sifre_degisikligi',
  aktif_mi: 'aktif_mi',
  guncelleme_tarihi: 'guncelleme_tarihi',
  bolum_id: 'bolum_id',
  fakulte_id: 'fakulte_id'
};

exports.Prisma.OturumlarScalarFieldEnum = {
  id: 'id',
  ders_id: 'ders_id',
  tarih: 'tarih',
  saat: 'saat',
  konu: 'konu',
  qr_anahtari: 'qr_anahtari',
  qr_yayin_suresi: 'qr_yayin_suresi',
  derslik: 'derslik',
  olusturma_tarihi: 'olusturma_tarihi',
  ogretmen_latitude: 'ogretmen_latitude',
  ogretmen_longitude: 'ogretmen_longitude',
  max_count: 'max_count',
  oturum_no: 'oturum_no'
};

exports.Prisma.Senkron_logScalarFieldEnum = {
  id: 'id',
  kullanici_id: 'kullanici_id',
  cihaz_id: 'cihaz_id',
  senkron_zamani: 'senkron_zamani'
};

exports.Prisma.YoklamalarScalarFieldEnum = {
  id: 'id',
  oturum_id: 'oturum_id',
  ogrenci_id: 'ogrenci_id',
  zaman: 'zaman',
  durum: 'durum',
  mazeretli: 'mazeretli',
  konum: 'konum',
  cihaz_id: 'cihaz_id',
  ip_adresi: 'ip_adresi',
  tarama_tipi: 'tarama_tipi',
  ders_id: 'ders_id',
  aciklama: 'aciklama',
  tur_no: 'tur_no',
  count: 'count'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  bildirimler: 'bildirimler',
  bolumler: 'bolumler',
  ders_kayitlari: 'ders_kayitlari',
  dersler: 'dersler',
  fakulteler: 'fakulteler',
  kullanicilar: 'kullanicilar',
  oturumlar: 'oturumlar',
  senkron_log: 'senkron_log',
  yoklamalar: 'yoklamalar'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
